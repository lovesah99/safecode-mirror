#!/bin/bash -e

#
# This script is used to compile and test a single file with SAFECode.
#

expect_error=1
format_strings=0
cstdlib_checks=0

usage()
{
  echo 'usage: test.sh [args] file.c/file.ll'
  echo 'arguments:'
  echo '   -t dir    directory to use for testing'
  echo '   -p        expect no SAFEcode errors from the test case'
  echo '   -e        expect a SAFEcode error from the test case'
  echo '   -c        enable CStdLib runtime checks'
  echo '   -f        enable format string function runtime checks'
}

# Process the arguments.
while getopts hept:cf option
  do
    case $option in
      f) format_strings=1;;
      c) cstdlib_checks=1;;
      e) expect_error=1;;
      p) expect_error=0;;
      t) testdir=$OPTARG;;
      h) usage
         exit 1;;
      \?) exit 1;;
    esac
  done

# Get the file argument.
shift $((OPTIND-1))

# If there is no file, print usage information and exit.
if [ $# -lt 1 ]
then
  usage
  exit 1
fi

llvmgcc=@LLVMGCC@
gxx=@CXX@
sc=@SC@
llc=@LLC@
sc_lib=@SC_LIB@
llvmas=@LLVMAS@

filename=$1
# Directory to use for temporary files.
testdir=${testdir:-$(dirname $filename)}
filebase=$(basename $filename)
case $filebase in
  *.ll) prefix=${filebase%%.ll}
        filetype=ll;;
   *.c) prefix=${filebase%%.c}
        filetype=c;;
     *) echo "unknown file type"
        exit 1;;
esac
# Bitcode object
bcfile=$testdir/${prefix}.bc
# Bitcode with SAFECode transformations
scobj=$testdir/${prefix}.sc.bc
# Compiled version of SAFECode transformations
scasm=$testdir/${prefix}.sc.s
# SAFECode compilation log
sclog=$testdir/${prefix}.sc.log
# Final executable
scfile=$testdir/${prefix}.sc
# Executable output
scout=$testdir/${prefix}.sc.output

# Do any necessary cleanup before exit.
cleanup()
{
  return 0
}

# Prepare the testing directory.
setupdir()
{
  # Add temporary directory.
  mkdir -p $testdir
  # Remove previous temporary files, if any.
  rm -f $bcfile $scobj $scasm $scfile $scout
}

# Compile the bitcode of the test.
compile()
{
  # Compile input file to bitcode.
  case $filetype in
     c) $llvmgcc -c -emit-llvm -o $bcfile $filename;;
    ll) $llvmas $filename -o $bcfile;;
  esac
  # Build the flags to the call to sc.
  cstdlib_opt=''
  fstring_opt=''
  if [ $cstdlib_checks -eq 1 ]
  then
    cstdlib_opt='-disable-cstdlib=false'
  fi
  if [ $format_strings -eq 1 ]
  then
    fstring_opt='-disable-printfchecks=false'
  fi
  scflags=$cstdlib_opt' '$fstring_opt
  # Run SAFECode with CStdLib and format string passes on bitcode.
  $sc -terminate                  \
      -pa=apa                     \
      -stats                      \
      -time-passes                \
      $scflags                    \
      -o $scobj $bcfile >& $sclog
  # Compile native assembly file from processed bitcode.
  $llc -o $scasm $scobj
  # Build and link test.
  $gxx -o $scfile $scasm \
          $sc_lib/libsc_dbg_rt.a \
          $sc_lib/libpoolalloc_bitmap.a \
          $sc_lib/libgdtoa.a
}

# Run test and check results.
runtest()
{
  # Don't exit immediately on failure of below commands.
  set +e
  $scfile >& $scout
  # Ensure the test ran successfully. If not, exit with error.
  if [ $? -ne 0 ]
  then
    cleanup
    exit 1
  fi
  error_count=$(grep -c SAFECode $scout)
  set -e
  cleanup
  # Exit with a value depending on whether SAFECode output was encountered and
  # if we expected an error.
  if [ $error_count -gt 0 ]
  then
    exit $((!expect_error))
  else
    exit $((expect_error))
  fi
}

setupdir
compile
runtest
